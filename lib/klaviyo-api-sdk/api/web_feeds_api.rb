=begin
#Klaviyo API

#The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

The version of the OpenAPI document: 2025-04-15
Contact: developers@klaviyo.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module KlaviyoAPI
  class WebFeedsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Web Feed
    # Create a web feed.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `web-feeds:write`
    # @param web_feed_create_query [WebFeedCreateQuery] Create a web feed
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def create_web_feed(web_feed_create_query, opts = {})
      data, _status_code, _headers = create_web_feed_with_http_info(web_feed_create_query, opts)
      data
    end

    # Create Web Feed
    # Create a web feed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;1/s&#x60;&lt;br&gt;Steady: &#x60;15/m&#x60;  **Scopes:** &#x60;web-feeds:write&#x60;
    # @param web_feed_create_query [WebFeedCreateQuery] Create a web feed
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def create_web_feed_with_http_info(web_feed_create_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebFeedsApi.create_web_feed ...'
      end
      # verify the required parameter 'web_feed_create_query' is set
      if @api_client.config.client_side_validation && web_feed_create_query.nil?
        fail ArgumentError, "Missing the required parameter 'web_feed_create_query' when calling WebFeedsApi.create_web_feed"
      end
      # resource path
      local_var_path = '/api/web-feeds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-04-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(web_feed_create_query)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"WebFeedsApi.create_web_feed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebFeedsApi#create_web_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Web Feed
    # Delete the web feed with the given ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `web-feeds:write`
    # @param id [String] The ID of the web feed
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_web_feed(id, opts = {})
      delete_web_feed_with_http_info(id, opts)
      nil
    end

    # Delete Web Feed
    # Delete the web feed with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;1/s&#x60;&lt;br&gt;Steady: &#x60;15/m&#x60;  **Scopes:** &#x60;web-feeds:write&#x60;
    # @param id [String] The ID of the web feed
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_web_feed_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebFeedsApi.delete_web_feed ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebFeedsApi.delete_web_feed"
      end
      # resource path
      local_var_path = '/api/web-feeds/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-04-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"WebFeedsApi.delete_web_feed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebFeedsApi#delete_web_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Web Feed
    # Get the web feed with the given ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `web-feeds:read`
    # @param id [String] The ID of the web feed
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_web_feed For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
    # @return [Hash<String, Object>]
    def get_web_feed(id, opts = {})
      data, _status_code, _headers = get_web_feed_with_http_info(id, opts)
      data
    end

    # Get Web Feed
    # Get the web feed with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;1/s&#x60;&lt;br&gt;Steady: &#x60;15/m&#x60;  **Scopes:** &#x60;web-feeds:read&#x60;
    # @param id [String] The ID of the web feed
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_web_feed For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_web_feed_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebFeedsApi.get_web_feed ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebFeedsApi.get_web_feed"
      end
      allowable_values = ["name", "url", "request_method", "content_type", "created", "updated", "status"]
      if @api_client.config.client_side_validation && opts[:'fields_web_feed'] && !opts[:'fields_web_feed'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_web_feed\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/web-feeds/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[web-feed]'] = @api_client.build_collection_param(opts[:'fields_web_feed'], :csv) if !opts[:'fields_web_feed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-04-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"WebFeedsApi.get_web_feed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebFeedsApi#get_web_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Web Feeds
    # Get all web feeds for an account.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `web-feeds:read`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_web_feed For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;any&#x60;, &#x60;contains&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination
    # @option opts [Integer] :page_size Default: 5. Min: 1. Max: 20. (default to 5)
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
    # @return [Hash<String, Object>]
    def get_web_feeds(opts = {})
      data, _status_code, _headers = get_web_feeds_with_http_info(opts)
      data
    end

    # Get Web Feeds
    # Get all web feeds for an account.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;1/s&#x60;&lt;br&gt;Steady: &#x60;15/m&#x60;  **Scopes:** &#x60;web-feeds:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_web_feed For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;any&#x60;, &#x60;contains&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination
    # @option opts [Integer] :page_size Default: 5. Min: 1. Max: 20. (default to 5)
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_web_feeds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebFeedsApi.get_web_feeds ...'
      end
      allowable_values = ["name", "url", "request_method", "content_type", "created", "updated", "status"]
      if @api_client.config.client_side_validation && opts[:'fields_web_feed'] && !opts[:'fields_web_feed'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_web_feed\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 20
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling WebFeedsApi.get_web_feeds, must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling WebFeedsApi.get_web_feeds, must be greater than or equal to 1.'
      end

      allowable_values = ["created", "-created", "name", "-name", "updated", "-updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/web-feeds'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[web-feed]'] = @api_client.build_collection_param(opts[:'fields_web_feed'], :csv) if !opts[:'fields_web_feed'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page[cursor]'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-04-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"WebFeedsApi.get_web_feeds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebFeedsApi#get_web_feeds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Web Feed
    # Update the web feed with the given ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `web-feeds:write`
    # @param id [String] The ID of the web feed
    # @param web_feed_partial_update_query [WebFeedPartialUpdateQuery] Update a web feed by ID
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def update_web_feed(id, web_feed_partial_update_query, opts = {})
      data, _status_code, _headers = update_web_feed_with_http_info(id, web_feed_partial_update_query, opts)
      data
    end

    # Update Web Feed
    # Update the web feed with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;1/s&#x60;&lt;br&gt;Steady: &#x60;15/m&#x60;  **Scopes:** &#x60;web-feeds:write&#x60;
    # @param id [String] The ID of the web feed
    # @param web_feed_partial_update_query [WebFeedPartialUpdateQuery] Update a web feed by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_web_feed_with_http_info(id, web_feed_partial_update_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebFeedsApi.update_web_feed ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebFeedsApi.update_web_feed"
      end
      # verify the required parameter 'web_feed_partial_update_query' is set
      if @api_client.config.client_side_validation && web_feed_partial_update_query.nil?
        fail ArgumentError, "Missing the required parameter 'web_feed_partial_update_query' when calling WebFeedsApi.update_web_feed"
      end
      # resource path
      local_var_path = '/api/web-feeds/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-04-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(web_feed_partial_update_query)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"WebFeedsApi.update_web_feed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebFeedsApi#update_web_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
