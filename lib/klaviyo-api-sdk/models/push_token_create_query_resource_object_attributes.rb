=begin
#Klaviyo API

#The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

The version of the OpenAPI document: 2023-12-15
Contact: developers@klaviyo.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module KlaviyoAPI
  class PushTokenCreateQueryResourceObjectAttributes
    # A push token from APNS or FCM.
    attr_accessor :token

    # The platform on which the push token was created.
    attr_accessor :platform

    # This is the enablement status for the individual push token.
    attr_accessor :enablement_status

    # The vendor of the push token.
    attr_accessor :vendor

    # The background state of the push token.
    attr_accessor :background

    attr_accessor :device_metadata

    attr_accessor :profile

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'platform' => :'platform',
        :'enablement_status' => :'enablement_status',
        :'vendor' => :'vendor',
        :'background' => :'background',
        :'device_metadata' => :'device_metadata',
        :'profile' => :'profile'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'platform' => :'String',
        :'enablement_status' => :'String',
        :'vendor' => :'String',
        :'background' => :'String',
        :'device_metadata' => :'DeviceMetadata',
        :'profile' => :'PushTokenCreateQueryResourceObjectAttributesProfile'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KlaviyoAPI::PushTokenCreateQueryResourceObjectAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KlaviyoAPI::PushTokenCreateQueryResourceObjectAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'enablement_status')
        self.enablement_status = attributes[:'enablement_status']
      else
        self.enablement_status = 'AUTHORIZED'
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'background')
        self.background = attributes[:'background']
      else
        self.background = 'AVAILABLE'
      end

      if attributes.key?(:'device_metadata')
        self.device_metadata = attributes[:'device_metadata']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @platform.nil?
        invalid_properties.push('invalid value for "platform", platform cannot be nil.')
      end

      if @vendor.nil?
        invalid_properties.push('invalid value for "vendor", vendor cannot be nil.')
      end

      if @profile.nil?
        invalid_properties.push('invalid value for "profile", profile cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @token.nil?
      return false if @platform.nil?
      platform_validator = EnumAttributeValidator.new('String', ["android", "ios"])
      return false unless platform_validator.valid?(@platform)
      enablement_status_validator = EnumAttributeValidator.new('String', ["AUTHORIZED", "DENIED", "NOT_DETERMINED", "PROVISIONAL", "UNAUTHORIZED"])
      return false unless enablement_status_validator.valid?(@enablement_status)
      return false if @vendor.nil?
      vendor_validator = EnumAttributeValidator.new('String', ["apns", "fcm"])
      return false unless vendor_validator.valid?(@vendor)
      background_validator = EnumAttributeValidator.new('String', ["AVAILABLE", "DENIED", "RESTRICTED"])
      return false unless background_validator.valid?(@background)
      return false if @profile.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform Object to be assigned
    def platform=(platform)
      validator = EnumAttributeValidator.new('String', ["android", "ios"])
      unless validator.valid?(platform)
        fail ArgumentError, "invalid value for \"platform\", must be one of #{validator.allowable_values}."
      end
      @platform = platform
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enablement_status Object to be assigned
    def enablement_status=(enablement_status)
      validator = EnumAttributeValidator.new('String', ["AUTHORIZED", "DENIED", "NOT_DETERMINED", "PROVISIONAL", "UNAUTHORIZED"])
      unless validator.valid?(enablement_status)
        fail ArgumentError, "invalid value for \"enablement_status\", must be one of #{validator.allowable_values}."
      end
      @enablement_status = enablement_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vendor Object to be assigned
    def vendor=(vendor)
      validator = EnumAttributeValidator.new('String', ["apns", "fcm"])
      unless validator.valid?(vendor)
        fail ArgumentError, "invalid value for \"vendor\", must be one of #{validator.allowable_values}."
      end
      @vendor = vendor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] background Object to be assigned
    def background=(background)
      validator = EnumAttributeValidator.new('String', ["AVAILABLE", "DENIED", "RESTRICTED"])
      unless validator.valid?(background)
        fail ArgumentError, "invalid value for \"background\", must be one of #{validator.allowable_values}."
      end
      @background = background
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          platform == o.platform &&
          enablement_status == o.enablement_status &&
          vendor == o.vendor &&
          background == o.background &&
          device_metadata == o.device_metadata &&
          profile == o.profile
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, platform, enablement_status, vendor, background, device_metadata, profile].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KlaviyoAPI.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
