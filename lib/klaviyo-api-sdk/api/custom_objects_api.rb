=begin
#Klaviyo API

#The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

Contact: developers@klaviyo.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module KlaviyoAPI
  class CustomObjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk Create Data Source Records
    # Create a data source record job.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `15/m`  **Scopes:** `custom-objects:write`
    # @param data_source_record_bulk_create_job_create_query [DataSourceRecordBulkCreateJobCreateQuery] Create a data source record job
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def bulk_create_data_source_records(data_source_record_bulk_create_job_create_query, opts = {})
      bulk_create_data_source_records_with_http_info(data_source_record_bulk_create_job_create_query, opts)
      nil
    end

    # alias of `bulk_create_data_source_records`
    alias create_data_source_record_bulk_create_job bulk_create_data_source_records

    # Bulk Create Data Source Records
    # Create a data source record job.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;15/m&#x60;  **Scopes:** &#x60;custom-objects:write&#x60;
    # @param data_source_record_bulk_create_job_create_query [DataSourceRecordBulkCreateJobCreateQuery] Create a data source record job
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def bulk_create_data_source_records_with_http_info(data_source_record_bulk_create_job_create_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.bulk_create_data_source_records ...'
      end
      # verify the required parameter 'data_source_record_bulk_create_job_create_query' is set
      if @api_client.config.client_side_validation && data_source_record_bulk_create_job_create_query.nil?
        fail ArgumentError, "Missing the required parameter 'data_source_record_bulk_create_job_create_query' when calling CustomObjectsApi.bulk_create_data_source_records"
      end
      # resource path
      local_var_path = '/api/data-source-record-bulk-create-jobs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-07-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data_source_record_bulk_create_job_create_query)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"CustomObjectsApi.bulk_create_data_source_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#bulk_create_data_source_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # alias of `bulk_create_data_source_records_with_http_info`
    alias create_data_source_record_bulk_create_job_with_http_info bulk_create_data_source_records_with_http_info

    # Create Data Source
    # Create a new data source in an account<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `custom-objects:write`
    # @param data_source_create_query [DataSourceCreateQuery] Create data source
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def create_data_source(data_source_create_query, opts = {})
      data, _status_code, _headers = create_data_source_with_http_info(data_source_create_query, opts)
      data
    end

    # Create Data Source
    # Create a new data source in an account&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;custom-objects:write&#x60;
    # @param data_source_create_query [DataSourceCreateQuery] Create data source
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def create_data_source_with_http_info(data_source_create_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.create_data_source ...'
      end
      # verify the required parameter 'data_source_create_query' is set
      if @api_client.config.client_side_validation && data_source_create_query.nil?
        fail ArgumentError, "Missing the required parameter 'data_source_create_query' when calling CustomObjectsApi.create_data_source"
      end
      # resource path
      local_var_path = '/api/data-sources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-07-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data_source_create_query)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"CustomObjectsApi.create_data_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#create_data_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Data Source
    # Delete a data source in an account.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `custom-objects:write`
    # @param id [String] The ID of the data source to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_data_source(id, opts = {})
      delete_data_source_with_http_info(id, opts)
      nil
    end

    # Delete Data Source
    # Delete a data source in an account.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;custom-objects:write&#x60;
    # @param id [String] The ID of the data source to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_data_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.delete_data_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomObjectsApi.delete_data_source"
      end
      # resource path
      local_var_path = '/api/data-sources/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-07-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"CustomObjectsApi.delete_data_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#delete_data_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data Source
    # Retrieve a data source in an account.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `custom-objects:read`
    # @param id [String] The ID of the data source
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets
    # @return [Hash<String, Object>]
    def get_data_source(id, opts = {})
      data, _status_code, _headers = get_data_source_with_http_info(id, opts)
      data
    end

    # Get Data Source
    # Retrieve a data source in an account.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;custom-objects:read&#x60;
    # @param id [String] The ID of the data source
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_data_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_data_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomObjectsApi.get_data_source"
      end
      allowable_values = ["title", "visibility", "description"]
      if @api_client.config.client_side_validation && opts[:'fields_data_source'] && !opts[:'fields_data_source'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_data_source\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/data-sources/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[data-source]'] = @api_client.build_collection_param(opts[:'fields_data_source'], :csv) if !opts[:'fields_data_source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-07-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"CustomObjectsApi.get_data_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_data_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data Sources
    # Get all data sources in an account.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `custom-objects:read`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets
    # @option opts [String] :page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination
    # @option opts [Integer] :page_size Default: 20. Min: 1. Max: 100. (default to 20)
    # @return [Hash<String, Object>]
    def get_data_sources(opts = {})
      data, _status_code, _headers = get_data_sources_with_http_info(opts)
      data
    end

    # Get Data Sources
    # Get all data sources in an account.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;custom-objects:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets
    # @option opts [String] :page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination
    # @option opts [Integer] :page_size Default: 20. Min: 1. Max: 100. (default to 20)
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_data_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_data_sources ...'
      end
      allowable_values = ["title", "visibility", "description"]
      if @api_client.config.client_side_validation && opts[:'fields_data_source'] && !opts[:'fields_data_source'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_data_source\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CustomObjectsApi.get_data_sources, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CustomObjectsApi.get_data_sources, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/data-sources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[data-source]'] = @api_client.build_collection_param(opts[:'fields_data_source'], :csv) if !opts[:'fields_data_source'].nil?
      query_params[:'page[cursor]'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['KLAVIYO_API_REVISION'] || ENV['API_REVISION'] || "2025-07-15"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key', 'OAuth']

      new_options = opts.merge(
        :operation => :"CustomObjectsApi.get_data_sources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_data_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
